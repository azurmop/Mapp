plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.gms.google-services'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "ba.mop.android.mapp"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            if (isInCiCd()) {
                println("signing: Inside CI")
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            } else {
                def encodedContents = keystoreProperties['storeFileEncoded']
                def command = ["sh", "decode_keystore.sh", encodedContents]
                command.execute().text
                storeFile file("../decoded_keystore")
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        applicationVariants.all { variant ->
            variant.outputs.all {
                def buildType = variant.buildType.name
                def versionName = variant.versionName
                def versionCode = variant.versionCode

                def fileNameBuilder = new StringBuilder()
                fileNameBuilder.append("Mapp").append("_")
                fileNameBuilder.append(versionName).append("-v")
                fileNameBuilder.append(versionCode).append("_")
                /*if (isInCiCd()) {
                    fileNameBuilder.append(System.getenv()["CM_BRANCH"]).append("_")
                }*/
                if (buildType != "debug") {
                    fileNameBuilder.append(new Date().format("yyyyddMMHHmm"))
                }
                fileNameBuilder.append(".apk")
                outputFileName = fileNameBuilder.toString()
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

}

dependencies {

    implementation platform('com.google.firebase:firebase-bom:29.2.1')

    implementation 'androidx.core:core-ktx:1.5.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'com.kaspersky.android-components:kaspresso:1.2.0'

}

static def isInCiCd() {
    // CI=true is exported by Codemagic
    return System.getenv()["CI"]
}